# -*- coding: utf-8 -*-
"""Vendas_Gustavo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jDAZ0OujJNRZe1P9qshdztdIC5ShqEbA

#Imports
"""

import pandas as pd
import plotly.express as px
from dash import Input, Output, dcc, dbc, html, Dash

"""#Dados"""

#Carregar Planilhas
Base_vendas2020 = pd.read_excel('Base Vendas - 2020.xlsx')
Base_vendas2021 = pd.read_excel('Base Vendas - 2021.xlsx')
Base_vendas2022 = pd.read_excel('Base Vendas - 2022.xlsx')
df_Base_vendas = pd.concat([Base_vendas2020, Base_vendas2021, Base_vendas2022])

cad_clientes = pd.read_excel('Cadastro Clientes.xlsx')
cad_lojas = pd.read_excel('Cadastro Lojas.xlsx')
cad_produtos = pd.read_excel('Cadastro Produtos.xlsx')

"""#Copias DF"""

Vendas = df_Base_vendas.copy()
Clientes = cad_clientes.copy()
Lojas = cad_lojas.copy()
Produtos = cad_produtos.copy()

print(Vendas.head(5))
print(Clientes.head(5))
print(Lojas.head(5))
print(Produtos.head(5))

"""#Exibir nomes das colunas

"""

print(Clientes.columns.tolist())
print(Lojas.columns.tolist())
print(Produtos.columns.tolist())
print(Vendas.columns.tolist())

"""#Tratando tabela Cliente

"""

df_clientes = pd.read_excel('Cadastro Clientes.xlsx', skiprows=2)
Clientes=df_clientes.copy()

print(Clientes.columns.tolist())

#Dropando as ultimas duas colunas
Clientes.drop(columns=['Unnamed: 10', 'Unnamed: 11'], inplace=True)
print(Clientes.columns.tolist())

#Unificando as colunas: Primeiro Nome e Sobrenome da tabela Clientes.
Clientes ['Nome Completo'] = Clientes['Primeiro Nome'] + ' ' + Clientes['Sobrenome']

#Removendo colunas "Primeiro Nome" e "Sobrenome"
Clientes.drop(columns=['Primeiro Nome', 'Sobrenome'], inplace=True)

print(Clientes.columns.tolist())

#Movendo a posi√ß√£o da coluna "Nome Completo" para segunda coluna, e a coluna "Email" para ultima coluna
coluna_nome = Clientes.pop('Nome Completo')
Clientes.insert(1, 'Nome Completo', coluna_nome)

coluna_email = Clientes.pop('Email')
Clientes.insert(8, 'Email', coluna_email)

print(Clientes.columns.tolist())

"""#Tratando tabela Produtos"""

#Renomenadno SKU para ID Produto
Produtos.rename(columns={'SKU': 'ID Produto'}, inplace=True)
print(Produtos.columns.tolist())

"""#Tratando tabela Vendas

"""

#Renomenando SKU (da tabela) Vendas
Vendas.rename(columns={'SKU': 'ID Produto'}, inplace=True)
print(Vendas.columns.tolist())

"""#Dashbord"""

print(Vendas.columns.tolist())
print(Clientes.columns.tolist())
print(Produtos.columns.tolist())
print(Lojas.columns.tolist())

#Unificar os dados Cliente, Produto e Loja
Total_vendido = Vendas.merge(Clientes, on='ID Cliente', how='left')\
                      .merge(Produtos, on='ID Produto', how='left')\
                      .merge(Lojas, on='ID Loja', how='left')

print(Total_vendido.columns.tolist())

#Convertendo data para datetime
Total_vendido['Data da Venda'] = pd.to_datetime(Total_vendido['Data da Venda'], format='%d/%m/%Y')

#Criando a coluna de ano
Total_vendido['Ano'] = Total_vendido['Data da Venda'].dt.year

#Criando a coluna de valor da venda
Total_vendido['Valor da Venda'] = Total_vendido['Qtd Vendida'] * Total_vendido['Pre√ßo Unitario']

print(Total_vendido.columns.tolist())

"""#Gerando Graficos"""

# Filtros
filtros = {
    "produto": Total_vendido["Produto"].unique(),
    "loja": Total_vendido["Nome da Loja"].unique(),
    "cliente": Total_vendido["Nome Completo"].unique(),
    "marca": Total_vendido["Marca"].unique(),
    "tipo": Total_vendido["Tipo do Produto"].unique(),
}

# Iniciar app
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Layout
app.layout = dbc.Container([
    html.H1("üìä Dashboard de Vendas", className="text-center my-4 text-primary"),

    dbc.Row([
        dbc.Col(dcc.Dropdown(id='filtro_tipo', options=[{'label': i, 'value': i} for i in filtros['tipo']],
                             placeholder="Selecione o Tipo de Produto"), md=4),
        dbc.Col(dcc.Dropdown(id='filtro_marca', placeholder="Selecione a Marca"), md=4),
        dbc.Col(dcc.Dropdown(id='filtro_produto', options=[{'label': i, 'value': i} for i in filtros['produto']],
                             multi=True, placeholder="Filtrar por Produto"), md=4),
        dbc.Col(dcc.Dropdown(id='filtro_loja', options=[{'label': i, 'value': i} for i in filtros['loja']],
                             multi=True, placeholder="Filtrar por Loja"), md=4),
        dbc.Col(dcc.Dropdown(id='filtro_cliente', options=[{'label': i, 'value': i} for i in filtros['cliente']],
                             multi=True, placeholder="Filtrar por Cliente"), md=4),
    ], className="mb-4"),

    dbc.Row([
        dbc.Col(dcc.Graph(id='grafico_ano'), md=6),
        dbc.Col(dcc.Graph(id='grafico_cliente'), md=6),
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='grafico_produto'), md=6),
        dbc.Col(dcc.Graph(id='grafico_loja'), md=6),
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='grafico_pizza_tipo'), md=6),
        dbc.Col(dcc.Graph(id='grafico_area_tempo'), md=6),
    ]),
], fluid=True)

# Callback para atualizar op√ß√µes de Marca com base no Tipo selecionado
@app.callback(
    Output('filtro_marca', 'options'),
    Input('filtro_tipo', 'value')
)
def atualizar_marcas(tipo):
    if tipo:
        marcas = Total_vendido[Total_vendido['Tipo do Produto'] == tipo]['Marca'].unique()
        return [{'label': m, 'value': m} for m in marcas]
    return []

# Callback para atualizar os gr√°ficos com base nos filtros
@app.callback(
    [Output('grafico_ano', 'figure'),
     Output('grafico_cliente', 'figure'),
     Output('grafico_produto', 'figure'),
     Output('grafico_loja', 'figure'),
     Output('grafico_pizza_tipo', 'figure'),
     Output('grafico_area_tempo', 'figure')],
    [Input('filtro_tipo', 'value'),
     Input('filtro_marca', 'value'),
     Input('filtro_produto', 'value'),
     Input('filtro_loja', 'value'),
     Input('filtro_cliente', 'value')]
)
def atualizar_graficos(tipo, marca, produtos, lojas, clientes):
    df = Total_vendido.copy()

    if tipo:
        df = df[df['Tipo do Produto'] == tipo]
    if marca:
        df = df[df['Marca'] == marca]
    if produtos:
        df = df[df['Produto'].isin(produtos)]
    if lojas:
        df = df[df['Nome da Loja'].isin(lojas)]
    if clientes:
        df = df[df['Nome Completo'].isin(clientes)]

    # Garantir que a data esteja em formato datetime
    if not pd.api.types.is_datetime64_any_dtype(df["Data da Venda"]):
        df["Data da Venda"] = pd.to_datetime(df["Data da Venda"])

    # Gr√°fico 1 - Vendas por Ano
    fig1 = px.bar(df.groupby("Ano")["Valor da Venda"].sum().reset_index(),
                  x="Ano", y="Valor da Venda", title="Vendas por Ano",
                  color_discrete_sequence=["#e74c3c"], template='plotly_white')

    # Gr√°fico 2 - Top 10 Clientes
    fig2 = px.bar(df.groupby("Nome Completo")["Valor da Venda"].sum().nlargest(10).reset_index(),
                  x="Valor da Venda", y="Nome Completo", orientation='h',
                  title="Top 10 Clientes", color_discrete_sequence=["#9b59b6"], template='plotly_white')

    # Gr√°fico 3 - Top 10 Produtos
    fig3 = px.line(df.groupby("Produto")["Valor da Venda"].sum().nlargest(10).reset_index(),
                   x="Produto", y="Valor da Venda", title="Top 10 Produtos",
                   markers=True, color_discrete_sequence=["#2980b9"], template='plotly_white')

    # Gr√°fico 4 - Vendas por Loja
    fig4 = px.bar(df.groupby("Nome da Loja")["Valor da Venda"].sum().reset_index(),
                  x="Nome da Loja", y="Valor da Venda", title="Vendas por Loja",
                  color_discrete_sequence=["#f39c12"], template='plotly_white')

    # Gr√°fico 5 - Distribui√ß√£o por Tipo de Produto
    fig5 = px.pie(df, names="Tipo do Produto", values="Valor da Venda", title="Distribui√ß√£o por Tipo de Produto",
                  color_discrete_sequence=px.colors.qualitative.Bold)

    # Gr√°fico 6 - Evolu√ß√£o Mensal
    df["M√™s"] = df["Data da Venda"].dt.to_period("M").astype(str)
    fig6 = px.area(df.groupby("M√™s")["Valor da Venda"].sum().reset_index(),
                   x="M√™s", y="Valor da Venda", title="Evolu√ß√£o Mensal de Vendas",
                   color_discrete_sequence=["#16a085"], template='plotly_white')

    return fig1, fig2, fig3, fig4, fig5, fig6

server = app.server
